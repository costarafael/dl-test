{"version":3,"file":"estoqueHelpers-D6sB3H2E.js","sources":["../../src/utils/eventHelpers.ts","../../src/utils/estoqueHelpers.ts"],"sourcesContent":["// Utilitários genéricos para registro de eventos\n\n// Função genérica para gerar IDs de eventos\nexport const generateEventId = (prefix: string): string => {\n  return `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\n};\n\n// Função genérica para criar evento base\nexport const createBaseEvent = <T extends { id: string; data: string }>(\n  eventData: Omit<T, 'id' | 'data'>,\n  idPrefix: string\n): T => {\n  return {\n    ...eventData,\n    id: generateEventId(idPrefix),\n    data: new Date().toISOString(),\n  } as T;\n};\n\n// Factory para criar registradores de eventos específicos\nexport const createEventRegistrar = <T extends { id: string; data: string }>(\n  apiService: { create: (event: T) => Promise<T> },\n  idPrefix: string\n) => {\n  return async (eventData: Omit<T, 'id' | 'data'>): Promise<T> => {\n    try {\n      const evento = createBaseEvent<T>(eventData, idPrefix);\n      await apiService.create(evento);\n      return evento;\n    } catch (error) {\n      console.error(`Erro ao registrar evento ${idPrefix}:`, error);\n      throw error;\n    }\n  };\n};\n\n// Tipos comuns para eventos\nexport interface BaseEvent {\n  id: string;\n  data: string;\n  responsavel: string;\n  descricao: string;\n}\n\nexport interface EstoqueEvent extends BaseEvent {\n  itemEstoqueId: string;\n  tipo: 'entrada' | 'saida' | 'ajuste' | 'devolucao' | 'perda' | 'vencimento' | 'entrega' | 'cadastro';\n  quantidadeAnterior: number;\n  quantidadeAtual: number;\n  quantidade: number;\n  detalhes?: any;\n}\n\nexport interface HistoricoEvent extends BaseEvent {\n  fichaEPIId: string;\n  tipo: 'ficha_criada' | 'entrega_criada' | 'entrega_editada' | 'entrega_excluida' | 'item_devolvido' | 'item_desativado';\n  detalhes?: {\n    entregaId?: string;\n    itemId?: string;\n    equipamentos?: string[];\n    quantidades?: number[];\n  };\n}\n\n// Funções específicas para criar eventos de estoque\nexport const createEstoqueEventData = {\n  cadastro: (\n    itemEstoqueId: string,\n    nomeEquipamento: string,\n    quantidadeInicial: number,\n    responsavel = 'Sistema EPI'\n  ): Omit<EstoqueEvent, 'id' | 'data'> => ({\n    itemEstoqueId,\n    tipo: 'cadastro',\n    responsavel,\n    descricao: `Item de estoque criado - ${nomeEquipamento}`,\n    quantidadeAnterior: 0,\n    quantidadeAtual: quantidadeInicial,\n    quantidade: quantidadeInicial,\n    detalhes: {\n      motivo: 'Cadastro inicial do item no sistema'\n    }\n  }),\n\n  entrada: (\n    itemEstoqueId: string,\n    nomeEquipamento: string,\n    quantidadeAnterior: number,\n    quantidade: number,\n    responsavel: string,\n    detalhes: {\n      motivo: string;\n      notaFiscal?: string;\n      custoUnitario?: number;\n    }\n  ): Omit<EstoqueEvent, 'id' | 'data'> => ({\n    itemEstoqueId,\n    tipo: 'entrada',\n    responsavel,\n    descricao: `Entrada de estoque - ${nomeEquipamento}`,\n    quantidadeAnterior,\n    quantidadeAtual: quantidadeAnterior + quantidade,\n    quantidade,\n    detalhes\n  }),\n\n  saida: (\n    itemEstoqueId: string,\n    nomeEquipamento: string,\n    quantidadeAnterior: number,\n    quantidade: number,\n    responsavel: string,\n    detalhes: {\n      motivo: string;\n      entregaId?: string;\n      fichaEPIId?: string;\n      colaboradorNome?: string;\n    }\n  ): Omit<EstoqueEvent, 'id' | 'data'> => ({\n    itemEstoqueId,\n    tipo: detalhes.entregaId ? 'entrega' : 'saida',\n    responsavel,\n    descricao: detalhes.entregaId \n      ? `Saída por entrega - ${nomeEquipamento}`\n      : `Saída de estoque - ${nomeEquipamento}`,\n    quantidadeAnterior,\n    quantidadeAtual: quantidadeAnterior - quantidade,\n    quantidade,\n    detalhes\n  }),\n\n  ajuste: (\n    itemEstoqueId: string,\n    nomeEquipamento: string,\n    quantidadeAnterior: number,\n    novaQuantidade: number,\n    responsavel: string,\n    motivo: string\n  ): Omit<EstoqueEvent, 'id' | 'data'> => ({\n    itemEstoqueId,\n    tipo: 'ajuste',\n    responsavel,\n    descricao: `Ajuste de estoque - ${nomeEquipamento}`,\n    quantidadeAnterior,\n    quantidadeAtual: novaQuantidade,\n    quantidade: Math.abs(novaQuantidade - quantidadeAnterior),\n    detalhes: {\n      motivo: `${motivo} - ${novaQuantidade > quantidadeAnterior ? 'Aumento' : 'Redução'} de ${Math.abs(novaQuantidade - quantidadeAnterior)} unidades`\n    }\n  })\n};\n\n// Funções específicas para criar eventos de histórico\nexport const createHistoricoEventData = {\n  fichaCreated: (\n    fichaEPIId: string,\n    responsavel: string,\n    colaboradorNome: string\n  ): Omit<HistoricoEvent, 'id' | 'data'> => ({\n    fichaEPIId,\n    tipo: 'ficha_criada',\n    responsavel,\n    descricao: `Ficha EPI criada para ${colaboradorNome}`,\n    detalhes: {}\n  }),\n\n  entregaCreated: (\n    fichaEPIId: string,\n    entregaId: string,\n    responsavel: string,\n    equipamentos: string[],\n    quantidades: number[]\n  ): Omit<HistoricoEvent, 'id' | 'data'> => ({\n    fichaEPIId,\n    tipo: 'entrega_criada',\n    responsavel,\n    descricao: `Nova entrega criada com ${equipamentos.length} tipo(s) de EPI`,\n    detalhes: {\n      entregaId,\n      equipamentos,\n      quantidades\n    }\n  }),\n\n  entregaUpdated: (\n    fichaEPIId: string,\n    entregaId: string,\n    responsavel: string,\n    descricao: string\n  ): Omit<HistoricoEvent, 'id' | 'data'> => ({\n    fichaEPIId,\n    tipo: 'entrega_editada',\n    responsavel,\n    descricao,\n    detalhes: {\n      entregaId\n    }\n  }),\n\n  entregaDeleted: (\n    fichaEPIId: string,\n    entregaId: string,\n    responsavel: string\n  ): Omit<HistoricoEvent, 'id' | 'data'> => ({\n    fichaEPIId,\n    tipo: 'entrega_excluida',\n    responsavel,\n    descricao: 'Entrega removida da ficha',\n    detalhes: {\n      entregaId\n    }\n  }),\n\n  itemReturned: (\n    fichaEPIId: string,\n    itemId: string,\n    responsavel: string,\n    equipamento: string\n  ): Omit<HistoricoEvent, 'id' | 'data'> => ({\n    fichaEPIId,\n    tipo: 'item_devolvido',\n    responsavel,\n    descricao: `Item devolvido - ${equipamento}`,\n    detalhes: {\n      itemId\n    }\n  }),\n\n  itemDeactivated: (\n    fichaEPIId: string,\n    itemId: string,\n    responsavel: string,\n    equipamento: string,\n    motivo: string\n  ): Omit<HistoricoEvent, 'id' | 'data'> => ({\n    fichaEPIId,\n    tipo: 'item_desativado',\n    responsavel,\n    descricao: `Item desativado - ${equipamento} (${motivo})`,\n    detalhes: {\n      itemId\n    }\n  })\n};","import { ItemEstoque, EventoEstoque, TipoEPI } from '../types';\nimport { estoqueAPI, historicoEstoqueAPI, tiposEPIAPI } from '../services/api';\nimport { createEventRegistrar, createEstoqueEventData } from './eventHelpers';\nimport { isDataVencida, isProximoVencimento as isProximoVencimentoDate } from './dateHelpers';\n\n// Calcular status do item de estoque\nexport const calcularStatusEstoque = (item: ItemEstoque): 'disponivel' | 'baixo_estoque' | 'vencido' | 'esgotado' => {\n  // Verificar se esgotado\n  if (item.quantidade === 0) {\n    return 'esgotado';\n  }\n  \n  // Verificar se vencido usando helper\n  if (isDataVencida(item.dataValidade)) {\n    return 'vencido';\n  }\n  \n  // Verificar se baixo estoque\n  if (item.quantidade <= item.quantidadeMinima) {\n    return 'baixo_estoque';\n  }\n  \n  return 'disponivel';\n};\n\n// Verificar se está próximo ao vencimento\nexport const isProximoVencimento = (item: ItemEstoque, diasAlerta: number = 30): boolean => {\n  return isProximoVencimentoDate(item.dataValidade, diasAlerta);\n};\n\n// Registrar evento no histórico de estoque usando helper genérico\nexport const registrarEventoEstoque = createEventRegistrar<EventoEstoque>(\n  historicoEstoqueAPI,\n  'hist_est'\n);\n\n// Usar helpers genéricos para criar eventos\nexport const {\n  cadastro: criarEventoCadastroItem,\n  entrada: criarEventoEntrada,\n  saida: criarEventoSaida,\n  ajuste: criarEventoAjuste\n} = createEstoqueEventData;\n\n// Função para processar entrega e reduzir estoque centralizado automaticamente\nexport const processarEntregaEstoque = async (\n  entregaId: string,\n  fichaEPIId: string,\n  itensEntrega: Array<{ tipoEPIId: string; quantidade: number }>,\n  empresaId: string, // Mantido para referência do colaborador, mas não afeta estoque\n  colaboradorNome: string,\n  responsavel: string\n): Promise<{ sucesso: boolean; itensProcessados: any[]; erros: string[] }> => {\n  const itensProcessados: any[] = [];\n  const erros: string[] = [];\n  \n  try {\n    // Buscar todos os tipos EPI para nomes\n    const tiposEPI = await tiposEPIAPI.getAll();\n    const getTipoEPI = (id: string) => tiposEPI.find((t: TipoEPI) => t.id === id);\n    \n    for (const itemEntrega of itensEntrega) {\n      try {\n        const tipoEPI = getTipoEPI(itemEntrega.tipoEPIId);\n        if (!tipoEPI) {\n          erros.push(`Tipo EPI ${itemEntrega.tipoEPIId} não encontrado`);\n          continue;\n        }\n        \n        // Buscar item no estoque centralizado (estoque único por tipo EPI)\n        const itensEstoque = await estoqueAPI.getByTipoEPI(itemEntrega.tipoEPIId);\n        const itemEstoque = itensEstoque.find((item: ItemEstoque) => \n          calcularStatusEstoque(item) === 'disponivel'\n        );\n        \n        if (!itemEstoque) {\n          erros.push(`Não há estoque disponível de ${tipoEPI.nomeEquipamento}`);\n          continue;\n        }\n        \n        // Permitir estoque negativo - apenas alertar se quantidade insuficiente\n        if (itemEstoque.quantidade < itemEntrega.quantidade) {\n          console.warn(`⚠️ Estoque insuficiente de ${tipoEPI.nomeEquipamento}. Disponível: ${itemEstoque.quantidade}, Solicitado: ${itemEntrega.quantidade}. Permitindo estoque negativo.`);\n        }\n        \n        // Realizar saída do estoque centralizado\n        await estoqueAPI.saida(itemEstoque.id, {\n          quantidade: itemEntrega.quantidade,\n          responsavelId: responsavel,\n          motivo: 'Entrega para colaborador',\n          entregaId,\n          observacoes: `Entrega para ${colaboradorNome} (${empresaId})`\n        });\n        \n        // Registrar evento no histórico de estoque\n        await registrarEventoEstoque(\n          criarEventoSaida(\n            itemEstoque.id,\n            tipoEPI.nomeEquipamento,\n            itemEstoque.quantidade,\n            itemEntrega.quantidade,\n            responsavel,\n            {\n              motivo: 'Entrega para colaborador',\n              entregaId,\n              fichaEPIId,\n              colaboradorNome\n            }\n          )\n        );\n        \n        itensProcessados.push({\n          itemEstoqueId: itemEstoque.id,\n          tipoEPI: tipoEPI.nomeEquipamento,\n          quantidadeDescontada: itemEntrega.quantidade,\n          lote: itemEstoque.lote\n        });\n        \n      } catch (error) {\n        console.error(`Erro ao processar item ${itemEntrega.tipoEPIId}:`, error);\n        erros.push(`Erro ao processar ${itemEntrega.tipoEPIId}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);\n      }\n    }\n    \n    return {\n      sucesso: erros.length === 0,\n      itensProcessados,\n      erros\n    };\n    \n  } catch (error) {\n    console.error('Erro ao processar entrega no estoque:', error);\n    return {\n      sucesso: false,\n      itensProcessados: [],\n      erros: [`Erro geral: ${error instanceof Error ? error.message : 'Erro desconhecido'}`]\n    };\n  }\n};\n\n// Função para processar edição de entrega e ajustar estoque\nexport const processarEdicaoEntregaEstoque = async (\n  entregaId: string,\n  itensAntigos: Array<{ tipoEPIId: string; quantidade: number }>,\n  itensNovos: Array<{ tipoEPIId: string; quantidade: number }>,\n  _empresaId: string,\n  colaboradorNome: string,\n  responsavel: string\n): Promise<{ sucesso: boolean; ajustes: any[]; erros: string[] }> => {\n  const ajustes: any[] = [];\n  const erros: string[] = [];\n  \n  try {\n    // Buscar todos os tipos EPI para nomes\n    const tiposEPI = await tiposEPIAPI.getAll();\n    const getTipoEPI = (id: string) => tiposEPI.find((t: TipoEPI) => t.id === id);\n    \n    // Criar mapa de itens antigos e novos para comparação\n    const mapaAntigos = new Map<string, number>();\n    const mapaNovos = new Map<string, number>();\n    \n    itensAntigos.forEach(item => {\n      mapaAntigos.set(item.tipoEPIId, (mapaAntigos.get(item.tipoEPIId) || 0) + item.quantidade);\n    });\n    \n    itensNovos.forEach(item => {\n      mapaNovos.set(item.tipoEPIId, (mapaNovos.get(item.tipoEPIId) || 0) + item.quantidade);\n    });\n    \n    // Identificar todos os tipos EPI afetados\n    const todosOsTipos = new Set([...mapaAntigos.keys(), ...mapaNovos.keys()]);\n    \n    for (const tipoEPIId of todosOsTipos) {\n      try {\n        const tipoEPI = getTipoEPI(tipoEPIId);\n        if (!tipoEPI) {\n          erros.push(`Tipo EPI ${tipoEPIId} não encontrado`);\n          continue;\n        }\n        \n        const quantidadeAntiga = mapaAntigos.get(tipoEPIId) || 0;\n        const quantidadeNova = mapaNovos.get(tipoEPIId) || 0;\n        const diferenca = quantidadeNova - quantidadeAntiga;\n        \n        // Se não há diferença, não fazer nada\n        if (diferenca === 0) {\n          continue;\n        }\n        \n        // Buscar item no estoque centralizado\n        const itensEstoque = await estoqueAPI.getByTipoEPI(tipoEPIId);\n        const itemEstoque = itensEstoque.find((item: ItemEstoque) => \n          calcularStatusEstoque(item) === 'disponivel' || item.quantidade >= 0\n        );\n        \n        if (!itemEstoque) {\n          erros.push(`Item de estoque não encontrado para ${tipoEPI.nomeEquipamento}`);\n          continue;\n        }\n        \n        if (diferenca > 0) {\n          // Aumentou a quantidade - fazer saída adicional do estoque\n          await estoqueAPI.saida(itemEstoque.id, {\n            quantidade: diferenca,\n            responsavelId: responsavel,\n            motivo: 'Edição de entrega - quantidade aumentada',\n            entregaId,\n            observacoes: `Edição da entrega para ${colaboradorNome} - acréscimo de ${diferenca} unidade(s)`\n          });\n          \n          // Registrar evento\n          await registrarEventoEstoque(\n            criarEventoSaida(\n              itemEstoque.id,\n              tipoEPI.nomeEquipamento,\n              itemEstoque.quantidade,\n              diferenca,\n              responsavel,\n              {\n                motivo: 'Edição de entrega - quantidade aumentada',\n                entregaId,\n                colaboradorNome\n              }\n            )\n          );\n          \n          ajustes.push({\n            tipoEPIId,\n            nomeEquipamento: tipoEPI.nomeEquipamento,\n            tipo: 'saida',\n            quantidade: diferenca,\n            motivo: 'Edição de entrega - quantidade aumentada'\n          });\n          \n        } else {\n          // Diminuiu a quantidade - fazer entrada de volta no estoque\n          const quantidadeRetorno = Math.abs(diferenca);\n          \n          await estoqueAPI.entrada(itemEstoque.id, {\n            quantidade: quantidadeRetorno,\n            responsavelId: responsavel,\n            motivo: 'Edição de entrega - quantidade diminuída',\n            observacoes: `Edição da entrega para ${colaboradorNome} - retorno de ${quantidadeRetorno} unidade(s)`\n          });\n          \n          // Registrar evento\n          await registrarEventoEstoque(\n            criarEventoEntrada(\n              itemEstoque.id,\n              tipoEPI.nomeEquipamento,\n              itemEstoque.quantidade,\n              quantidadeRetorno,\n              responsavel,\n              {\n                motivo: 'Edição de entrega - quantidade diminuída'\n              }\n            )\n          );\n          \n          ajustes.push({\n            tipoEPIId,\n            nomeEquipamento: tipoEPI.nomeEquipamento,\n            tipo: 'entrada',\n            quantidade: quantidadeRetorno,\n            motivo: 'Edição de entrega - quantidade diminuída'\n          });\n        }\n        \n      } catch (error) {\n        console.error(`Erro ao processar ajuste para ${tipoEPIId}:`, error);\n        erros.push(`Erro ao ajustar ${tipoEPIId}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);\n      }\n    }\n    \n    return {\n      sucesso: erros.length === 0,\n      ajustes,\n      erros\n    };\n    \n  } catch (error) {\n    console.error('Erro ao processar edição de entrega no estoque:', error);\n    return {\n      sucesso: false,\n      ajustes: [],\n      erros: [`Erro geral: ${error instanceof Error ? error.message : 'Erro desconhecido'}`]\n    };\n  }\n};\n\n// Função para verificar alertas de estoque\nexport const verificarAlertasEstoque = async (): Promise<{\n  baixoEstoque: ItemEstoque[];\n  proximosVencimento: ItemEstoque[];\n  vencidos: ItemEstoque[];\n}> => {\n  try {\n    const todosItens = await estoqueAPI.getAll();\n    \n    const baixoEstoque: ItemEstoque[] = [];\n    const proximosVencimento: ItemEstoque[] = [];\n    const vencidos: ItemEstoque[] = [];\n    \n    for (const item of todosItens) {\n      const status = calcularStatusEstoque(item);\n      \n      if (status === 'baixo_estoque') {\n        baixoEstoque.push(item);\n      } else if (status === 'vencido') {\n        vencidos.push(item);\n      } else if (isProximoVencimento(item)) {\n        proximosVencimento.push(item);\n      }\n    }\n    \n    return { baixoEstoque, proximosVencimento, vencidos };\n  } catch (error) {\n    console.error('Erro ao verificar alertas de estoque:', error);\n    return { baixoEstoque: [], proximosVencimento: [], vencidos: [] };\n  }\n};\n\n// Função para processar devolução e aumentar estoque centralizado automaticamente\nexport const processarDevolucaoEstoque = async (\n  _fichaEPIId: string,\n  itensDevolucao: Array<{ tipoEPIId: string; quantidade: number; motivo?: string }>,\n  empresaId: string, // Mantido para referência do colaborador, mas não afeta estoque\n  colaboradorNome: string,\n  responsavel: string\n): Promise<{ sucesso: boolean; itensProcessados: any[]; erros: string[] }> => {\n  const itensProcessados: any[] = [];\n  const erros: string[] = [];\n  \n  try {\n    // Buscar todos os tipos EPI para nomes\n    const tiposEPI = await tiposEPIAPI.getAll();\n    const getTipoEPI = (id: string) => tiposEPI.find((t: TipoEPI) => t.id === id);\n    \n    for (const itemDevolucao of itensDevolucao) {\n      try {\n        const tipoEPI = getTipoEPI(itemDevolucao.tipoEPIId);\n        if (!tipoEPI) {\n          erros.push(`Tipo EPI ${itemDevolucao.tipoEPIId} não encontrado`);\n          continue;\n        }\n        \n        // Buscar item no estoque centralizado (único por tipo EPI)\n        const itensEstoque = await estoqueAPI.getByTipoEPI(itemDevolucao.tipoEPIId);\n        let itemEstoque = itensEstoque.find((item: ItemEstoque) => item.empresaId === 'almoxarifado');\n        \n        if (!itemEstoque) {\n          // Se não existe item de estoque, criar um novo no almoxarifado central\n          itemEstoque = await estoqueAPI.create({\n            id: `estoque_dev_${Date.now()}_${itemDevolucao.tipoEPIId}`,\n            tipoEPIId: itemDevolucao.tipoEPIId,\n            empresaId: 'almoxarifado', // ID fixo para almoxarifado central\n            quantidade: 0,\n            quantidadeMinima: 10,\n            localizacao: 'Almoxarifado Central',\n            lote: `LOTE-DEV-${Date.now()}`,\n            dataValidade: new Date(Date.now() + (tipoEPI.vidaUtilDias * 24 * 60 * 60 * 1000)).toISOString().split('T')[0]\n          });\n        }\n        \n        // Realizar entrada (devolução) no estoque centralizado\n        await estoqueAPI.entrada(itemEstoque.id, {\n          quantidade: itemDevolucao.quantidade,\n          responsavelId: responsavel,\n          motivo: itemDevolucao.motivo || 'Devolução de colaborador',\n          observacoes: `Devolução de ${colaboradorNome} (${empresaId})`\n        });\n        \n        // Registrar evento no histórico de estoque\n        await registrarEventoEstoque(\n          criarEventoEntrada(\n            itemEstoque.id,\n            tipoEPI.nomeEquipamento,\n            itemEstoque.quantidade,\n            itemDevolucao.quantidade,\n            responsavel,\n            {\n              motivo: itemDevolucao.motivo || 'Devolução de colaborador'\n            }\n          )\n        );\n        \n        itensProcessados.push({\n          itemEstoqueId: itemEstoque.id,\n          tipoEPI: tipoEPI.nomeEquipamento,\n          quantidadeDevolvida: itemDevolucao.quantidade,\n          lote: itemEstoque.lote\n        });\n        \n      } catch (error) {\n        console.error(`Erro ao processar devolução ${itemDevolucao.tipoEPIId}:`, error);\n        erros.push(`Erro ao processar devolução ${itemDevolucao.tipoEPIId}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);\n      }\n    }\n    \n    return {\n      sucesso: erros.length === 0,\n      itensProcessados,\n      erros\n    };\n    \n  } catch (error) {\n    console.error('Erro ao processar devolução no estoque:', error);\n    return {\n      sucesso: false,\n      itensProcessados: [],\n      erros: [`Erro geral: ${error instanceof Error ? error.message : 'Erro desconhecido'}`]\n    };\n  }\n};\n\n// Função para formatar histórico de movimentações\nexport const formatarHistoricoMovimentacao = (evento: EventoEstoque): string => {\n  const tipos = {\n    cadastro: 'Cadastro',\n    entrada: 'Entrada',\n    saida: 'Saída',\n    entrega: 'Entrega',\n    ajuste: 'Ajuste',\n    devolucao: 'Devolução',\n    perda: 'Perda',\n    vencimento: 'Vencimento'\n  };\n  \n  return tipos[evento.tipo] || evento.tipo;\n};"],"names":["generateEventId","prefix","createBaseEvent","eventData","idPrefix","createEventRegistrar","apiService","evento","error","createEstoqueEventData","itemEstoqueId","nomeEquipamento","quantidadeInicial","responsavel","quantidadeAnterior","quantidade","detalhes","calcularStatusEstoque","item","isDataVencida","isProximoVencimento","diasAlerta","isProximoVencimentoDate","registrarEventoEstoque","historicoEstoqueAPI","criarEventoCadastroItem","criarEventoEntrada","criarEventoSaida","processarEntregaEstoque","entregaId","fichaEPIId","itensEntrega","empresaId","colaboradorNome","itensProcessados","erros","tiposEPI","tiposEPIAPI","getTipoEPI","id","t","itemEntrega","tipoEPI","itemEstoque","estoqueAPI","processarEdicaoEntregaEstoque","itensAntigos","itensNovos","_empresaId","ajustes","mapaAntigos","mapaNovos","todosOsTipos","tipoEPIId","quantidadeAntiga","diferenca","quantidadeRetorno","processarDevolucaoEstoque","_fichaEPIId","itensDevolucao","itemDevolucao"],"mappings":"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"}