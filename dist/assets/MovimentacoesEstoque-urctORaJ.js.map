{"version":3,"file":"MovimentacoesEstoque-urctORaJ.js","sources":["../../src/pages/MovimentacoesEstoque.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Card, Tabs, Badge, Button, Table, TextInput, Select } from 'flowbite-react';\nimport { PlusIcon, MagnifyingGlassIcon, PencilIcon, EyeIcon } from '@heroicons/react/24/outline';\nimport { NotaEntrada, NotaSaida } from '../types';\nimport { useAPI } from '../hooks/useAPI';\nimport { notasEntradaAPI, notasSaidaAPI, tiposEPIAPI, estoqueAPI, movimentacaoNotasAPI } from '../services/api';\nimport { formatarData } from '../utils/dateHelpers';\nimport NewMovementModal from '../components/inventory/NewMovementModal';\n\nconst MovimentacoesEstoque: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<'entradas' | 'saidas'>('entradas');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'todos' | 'pendente' | 'processada' | 'cancelada'>('todos');\n  const [showNewModal, setShowNewModal] = useState(false);\n\n  // Carregar dados\n  const { data: notasEntrada = [], loading: loadingEntradas, refetch: refetchEntradas } = useAPI(notasEntradaAPI.getAll);\n  const { data: notasSaida = [], loading: loadingSaidas, refetch: refetchSaidas } = useAPI(notasSaidaAPI.getAll);\n  const { data: tiposEPI = [], loading: loadingTipos } = useAPI(tiposEPIAPI.getAll);\n  const { data: estoque = [] } = useAPI(estoqueAPI.getAll);\n\n\n  const isLoading = loadingEntradas || loadingSaidas || loadingTipos;\n\n  // Filtrar dados baseado na aba ativa\n  const currentData = activeTab === 'entradas' ? (notasEntrada || []) : (notasSaida || []);\n  \n  // Aplicar filtros\n  const filteredData = currentData.filter((nota: any) => {\n    const searchMatch = searchTerm === '' || \n      nota.numeroNota?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      nota.responsavel?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      nota.motivo?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const statusMatch = statusFilter === 'todos' || nota.status === statusFilter;\n    \n    return searchMatch && statusMatch;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pendente':\n        return <Badge color=\"warning\" className=\"w-fit\">Pendente</Badge>;\n      case 'processada':\n        return <Badge color=\"success\" className=\"w-fit\">Processada</Badge>;\n      case 'cancelada':\n        return <Badge color=\"failure\" className=\"w-fit\">Cancelada</Badge>;\n      default:\n        return <Badge color=\"gray\" className=\"w-fit\">{status}</Badge>;\n    }\n  };\n\n  const handleNewMovement = async (movementData: any) => {\n    try {\n      await movimentacaoNotasAPI.criarMovimentacao(movementData);\n      \n      // Refetch dados\n      if (movementData.tipo === 'entrada') {\n        await refetchEntradas();\n      } else {\n        await refetchSaidas();\n      }\n    } catch (error) {\n      console.error('Erro ao criar movimentação:', error);\n      throw error;\n    }\n  };\n\n  const handleEditNote = (nota: NotaEntrada | NotaSaida) => {\n    console.log('Edit note:', nota);\n    // TODO: Implementar modal de edição\n  };\n\n  const handleViewNote = (nota: NotaEntrada | NotaSaida) => {\n    console.log('View note:', nota);\n    // TODO: Implementar modal de visualização\n  };\n\n  const calculateTotal = (nota: NotaEntrada | NotaSaida) => {\n    if ('valorTotal' in nota && nota.valorTotal) {\n      return `R$ ${nota.valorTotal.toFixed(2)}`;\n    }\n    return '-';\n  };\n\n  const getItemsCount = (nota: NotaEntrada | NotaSaida) => {\n    return nota.itens.reduce((total: number, item: any) => total + item.quantidade, 0);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\n          Movimentações de Estoque\n        </h1>\n        <Button\n          onClick={() => setShowNewModal(true)}\n          color=\"primary\"\n          size=\"sm\"\n          className=\"rounded-sm\"\n        >\n          <PlusIcon className=\"h-4 w-4 mr-2\" />\n          Nova Movimentação\n        </Button>\n      </div>\n\n      {/* Filtros */}\n      <Card className=\"rounded-sm\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              Buscar\n            </label>\n            <div className=\"relative\">\n              <TextInput\n                icon={MagnifyingGlassIcon}\n                placeholder=\"Buscar por número, responsável ou motivo...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                sizing=\"sm\"\n                className=\"rounded-sm\"\n              />\n            </div>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              Status\n            </label>\n            <Select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value as any)}\n              sizing=\"sm\"\n              className=\"rounded-sm\"\n            >\n              <option value=\"todos\">Todos os status</option>\n              <option value=\"pendente\">Pendente</option>\n              <option value=\"processada\">Processada</option>\n              <option value=\"cancelada\">Cancelada</option>\n            </Select>\n          </div>\n          <div className=\"flex items-end\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              <span className=\"font-medium\">{filteredData.length}</span> registro(s) encontrado(s)\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Tabs de Entrada/Saída */}\n      <Card className=\"rounded-sm\">\n        <Tabs.Group\n          style=\"underline\"\n          onActiveTabChange={(tab) => setActiveTab(tab === 0 ? 'entradas' : 'saidas')}\n        >\n          <Tabs.Item title={`Notas de Entrada (${(notasEntrada || []).length})`} active={activeTab === 'entradas'}>\n            <div className=\"space-y-4\">\n              {/* Estatísticas das Entradas */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg\">\n                  <div className=\"text-sm text-green-600 dark:text-green-400\">Total Processadas</div>\n                  <div className=\"text-xl font-semibold text-green-700 dark:text-green-300\">\n                    {(notasEntrada || []).filter((n: any) => n.status === 'processada').length}\n                  </div>\n                </div>\n                <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg\">\n                  <div className=\"text-sm text-yellow-600 dark:text-yellow-400\">Pendentes</div>\n                  <div className=\"text-xl font-semibold text-yellow-700 dark:text-yellow-300\">\n                    {(notasEntrada || []).filter((n: any) => n.status === 'pendente').length}\n                  </div>\n                </div>\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                  <div className=\"text-sm text-blue-600 dark:text-blue-400\">Valor Total</div>\n                  <div className=\"text-xl font-semibold text-blue-700 dark:text-blue-300\">\n                    R$ {(notasEntrada || [])\n                      .filter((n: any) => n.status === 'processada')\n                      .reduce((total: number, n: any) => total + (n.valorTotal || 0), 0)\n                      .toFixed(2)}\n                  </div>\n                </div>\n                <div className=\"bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg\">\n                  <div className=\"text-sm text-purple-600 dark:text-purple-400\">Itens Recebidos</div>\n                  <div className=\"text-xl font-semibold text-purple-700 dark:text-purple-300\">\n                    {(notasEntrada || [])\n                      .filter((n: any) => n.status === 'processada')\n                      .reduce((total: number, n: any) => total + getItemsCount(n), 0)} un.\n                  </div>\n                </div>\n              </div>\n\n              {/* Tabela de Entradas */}\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <Table.Head>\n                    <Table.HeadCell>Número da Nota</Table.HeadCell>\n                    <Table.HeadCell>Data</Table.HeadCell>\n                    <Table.HeadCell>Responsável</Table.HeadCell>\n                    <Table.HeadCell>Fornecedor</Table.HeadCell>\n                    <Table.HeadCell>Valor Total</Table.HeadCell>\n                    <Table.HeadCell>Itens</Table.HeadCell>\n                    <Table.HeadCell>Status</Table.HeadCell>\n                    <Table.HeadCell>Ações</Table.HeadCell>\n                  </Table.Head>\n                  <Table.Body>\n                    {filteredData.map((nota: any) => (\n                      <Table.Row key={nota.id}>\n                        <Table.Cell className=\"font-medium\">\n                          {nota.numeroNota}\n                        </Table.Cell>\n                        <Table.Cell>\n                          {formatarData(nota.data)}\n                        </Table.Cell>\n                        <Table.Cell>{nota.responsavel}</Table.Cell>\n                        <Table.Cell>\n                          {'fornecedor' in nota ? nota.fornecedor || '-' : '-'}\n                        </Table.Cell>\n                        <Table.Cell>{calculateTotal(nota)}</Table.Cell>\n                        <Table.Cell>\n                          <Badge color=\"blue\" className=\"w-fit\">\n                            {getItemsCount(nota)} un.\n                          </Badge>\n                        </Table.Cell>\n                        <Table.Cell>{getStatusBadge(nota.status)}</Table.Cell>\n                        <Table.Cell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              onClick={() => handleViewNote(nota)}\n                              color=\"gray\"\n                              size=\"xs\"\n                              className=\"rounded-sm\"\n                            >\n                              <EyeIcon className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              onClick={() => handleEditNote(nota)}\n                              color=\"primary\"\n                              size=\"xs\"\n                              className=\"rounded-sm\"\n                              disabled={nota.status === 'cancelada'}\n                            >\n                              <PencilIcon className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </Table.Cell>\n                      </Table.Row>\n                    ))}\n                  </Table.Body>\n                </Table>\n              </div>\n            </div>\n          </Tabs.Item>\n\n          <Tabs.Item title={`Notas de Saída (${(notasSaida || []).length})`} active={activeTab === 'saidas'}>\n            <div className=\"space-y-4\">\n              {/* Estatísticas das Saídas */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"bg-red-50 dark:bg-red-900/20 p-4 rounded-lg\">\n                  <div className=\"text-sm text-red-600 dark:text-red-400\">Total Processadas</div>\n                  <div className=\"text-xl font-semibold text-red-700 dark:text-red-300\">\n                    {(notasSaida || []).filter((n: any) => n.status === 'processada').length}\n                  </div>\n                </div>\n                <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg\">\n                  <div className=\"text-sm text-yellow-600 dark:text-yellow-400\">Pendentes</div>\n                  <div className=\"text-xl font-semibold text-yellow-700 dark:text-yellow-300\">\n                    {(notasSaida || []).filter((n: any) => n.status === 'pendente').length}\n                  </div>\n                </div>\n                <div className=\"bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg\">\n                  <div className=\"text-sm text-orange-600 dark:text-orange-400\">Itens Expedidos</div>\n                  <div className=\"text-xl font-semibold text-orange-700 dark:text-orange-300\">\n                    {(notasSaida || [])\n                      .filter((n: any) => n.status === 'processada')\n                      .reduce((total: number, n: any) => total + getItemsCount(n), 0)} un.\n                  </div>\n                </div>\n                <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg\">\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">Destinatários</div>\n                  <div className=\"text-xl font-semibold text-gray-700 dark:text-gray-300\">\n                    {new Set((notasSaida || [])\n                      .filter((n: any) => 'destinatario' in n && n.destinatario)\n                      .map((n: any) => 'destinatario' in n ? n.destinatario : '')\n                    ).size}\n                  </div>\n                </div>\n              </div>\n\n              {/* Tabela de Saídas */}\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <Table.Head>\n                    <Table.HeadCell>Número da Nota</Table.HeadCell>\n                    <Table.HeadCell>Data</Table.HeadCell>\n                    <Table.HeadCell>Responsável</Table.HeadCell>\n                    <Table.HeadCell>Destinatário</Table.HeadCell>\n                    <Table.HeadCell>Solicitante</Table.HeadCell>\n                    <Table.HeadCell>Itens</Table.HeadCell>\n                    <Table.HeadCell>Status</Table.HeadCell>\n                    <Table.HeadCell>Ações</Table.HeadCell>\n                  </Table.Head>\n                  <Table.Body>\n                    {filteredData.map((nota: any) => (\n                      <Table.Row key={nota.id}>\n                        <Table.Cell className=\"font-medium\">\n                          {nota.numeroNota}\n                        </Table.Cell>\n                        <Table.Cell>\n                          {formatarData(nota.data)}\n                        </Table.Cell>\n                        <Table.Cell>{nota.responsavel}</Table.Cell>\n                        <Table.Cell>\n                          {'destinatario' in nota ? nota.destinatario || '-' : '-'}\n                        </Table.Cell>\n                        <Table.Cell>\n                          {'solicitante' in nota ? nota.solicitante || '-' : '-'}\n                        </Table.Cell>\n                        <Table.Cell>\n                          <Badge color=\"blue\" className=\"w-fit\">\n                            {getItemsCount(nota)} un.\n                          </Badge>\n                        </Table.Cell>\n                        <Table.Cell>{getStatusBadge(nota.status)}</Table.Cell>\n                        <Table.Cell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              onClick={() => handleViewNote(nota)}\n                              color=\"gray\"\n                              size=\"xs\"\n                              className=\"rounded-sm\"\n                            >\n                              <EyeIcon className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              onClick={() => handleEditNote(nota)}\n                              color=\"primary\"\n                              size=\"xs\"\n                              className=\"rounded-sm\"\n                              disabled={nota.status === 'cancelada'}\n                            >\n                              <PencilIcon className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </Table.Cell>\n                      </Table.Row>\n                    ))}\n                  </Table.Body>\n                </Table>\n              </div>\n            </div>\n          </Tabs.Item>\n        </Tabs.Group>\n      </Card>\n\n      {/* Modal Nova Movimentação */}\n      <NewMovementModal\n        show={showNewModal}\n        onClose={() => setShowNewModal(false)}\n        onSave={handleNewMovement}\n        tiposEPI={tiposEPI}\n        estoque={estoque}\n        isLoading={isLoading}\n      />\n\n      {/* TODO: Modal de Edição */}\n      {/* TODO: Modal de Visualização */}\n\n      {isLoading && (\n        <div className=\"text-center py-8\">\n          <div className=\"text-gray-500 dark:text-gray-400\">\n            Carregando movimentações...\n          </div>\n        </div>\n      )}\n\n      {!isLoading && filteredData.length === 0 && (\n        <div className=\"text-center py-8\">\n          <div className=\"text-gray-500 dark:text-gray-400\">\n            {searchTerm || statusFilter !== 'todos' \n              ? 'Nenhuma movimentação encontrada com os filtros aplicados.'\n              : `Nenhuma nota de ${activeTab === 'entradas' ? 'entrada' : 'saída'} cadastrada.`\n            }\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MovimentacoesEstoque;"],"names":["MovimentacoesEstoque","activeTab","setActiveTab","useState","searchTerm","setSearchTerm","statusFilter","setStatusFilter","showNewModal","setShowNewModal","notasEntrada","loadingEntradas","refetchEntradas","useAPI","notasEntradaAPI","notasSaida","loadingSaidas","refetchSaidas","notasSaidaAPI","tiposEPI","loadingTipos","tiposEPIAPI","estoque","estoqueAPI","isLoading","filteredData","nota","searchMatch","_a","_b","_c","statusMatch","getStatusBadge","status","Badge","handleNewMovement","movementData","movimentacaoNotasAPI","error","handleEditNote","handleViewNote","calculateTotal","getItemsCount","total","item","jsxs","jsx","Button","PlusIcon","Card","TextInput","MagnifyingGlassIcon","e","Select","Tabs","tab","n","Table","formatarData","EyeIcon","PencilIcon","NewMovementModal"],"mappings":"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"}